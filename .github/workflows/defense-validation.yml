name: Defense Validation
on:
  pull_request:
    types:
      - labeled

permissions:
  contents: write

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.pr_number.outputs.ATTACK_PR_NUMBER }}
    if: github.event.label.name == 'defense'

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Get PR number from message
        id: pr_number
        run: |
          PR_NUMBER=$(echo "${{ github.event.pull_request.body }}" | grep -oP '(?<=defends #)\d+')
          echo "ATTACK_PR_NUMBER=${PR_NUMBER}" >> $GITHUB_OUTPUT

      - name: Validate PR
        run: |
          # Check if attempt exists
          if [[ ! -f "attempt" ]]; then
            echo "::error file=attempt::attempt file does not exist in the pull request."
            exit 1
          fi

      - name: Reorganize
        run: |
          # Move the files to the attacks directory
          ATTACKS_DIR="attacks/${{ steps.pr_number.outputs.ATTACK_PR_NUMBER }}"
          mv attempt "$ATTACKS_DIR/"

          # Stage changes
          git add "$ATTACKS_DIR/attempt"

          # Check for staged changes
          if [[ -n $(git diff --cached --exit-code) ]]; then
            # Commit the changes
            git config user.email "actions@github.com"
            git config user.name "GitHub Actions"
            git commit -m "Organize files into $ATTACKS_DIR"

            # Push the changes back to the pull request branch
            git push
          fi

          # Fetch the latest changes from the remote repository
          git fetch
  
  check-solution:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'defense'
    needs: validate-pr

    steps:
      - name: Compare solution
        id: cmp_solution
        run: |
          ATTACKS_DIR="attacks/${{ needs.validate-pr.outputs.pr_number }}"

          # Compare the contents of attempt and solution
          if ! cmp -s "$ATTACKS_DIR/attempt" "$ATTACKS_DIR/solution"; then
            echo "failed='true'" >> $GITHUB_ENV
          fi

      - name: Add 'failure' label
        uses: octokit/request-action@v2.1.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.compare.outputs.failed == 'true'
        with:
          route: POST /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/labels
          headers: |
            Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}
          body: |
            {
              "labels": ["defense", "failure"]
            }

      - name: Add 'success' label
        uses: octokit/request-action@v2.1.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: steps.compare.outputs.failed == 'false'
        with:
          route: POST /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/labels
          headers: |
            Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}
          body: |
            {
              "labels": ["defense", "success"]
            }


  merge-pr:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'defense'
    needs: check-solution

    steps:
      - name: Merge PR
        uses: octokit/request-action@v2.1.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          route: PUT /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/merge
