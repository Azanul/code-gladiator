name: Attack Validation
on:
  pull_request:
    types:
      - labeled

permissions:
  contents: write

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'attack'

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Validate PR
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          ATTACKS_DIR="attacks/$PR_NUMBER"

          # Check if problem.md exists
          if [[ ! -f "problem.md" ]]; then
            echo "::error file=problem.md::problem.md does not exist in the pull request."
            exit 1
          fi

          # Check if solution exists
          if [[ ! -f "solution" ]]; then
            echo "::error file=solution::solution file does not exist in the pull request."
            exit 1
          fi

          # Create the attacks directory if it doesn't exist
          mkdir -p "$ATTACKS_DIR"

          # Move the files to the attacks directory
          mv problem.md solution "$ATTACKS_DIR/"

          # Stage changes
          git add "$ATTACKS_DIR/problem.md" "$ATTACKS_DIR/solution"

          # Check for staged changes
          if [[ -n $(git diff --cached --exit-code) ]]; then
            # Commit the changes
            git config user.email "actions@github.com"
            git config user.name "GitHub Actions"
            git commit -m "Organize files into $ATTACKS_DIR"

            # Push the changes back to the pull request branch
            git push
          fi

          # Fetch the latest changes from the remote repository
          git fetch

          # Get the commit hash of the current local branch's HEAD
          local_head=$(git rev-parse HEAD)

          # Get the commit hash of the remote branch's HEAD
          remote_head=$(git rev-parse "origin/${{ github.event.pull_request.base.ref }}")

          # Set the up_to_date output variable based on the comparison result
          echo "up_to_date=[[ $local_head = $remote_head ]]" >> $GITHUB_OUTPUT

      - name: Merge PR
        if: ${{ env.up_to_date == 'true' }}
        uses: octokit/request-action@v2.1.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          route: PUT /repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/merge
          headers: |
            Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}
          body: |
            {
              "merge_method": "merge"
            }

